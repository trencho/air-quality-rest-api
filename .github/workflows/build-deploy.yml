name: Deploy Flask API with MongoDB

on:
  push:
    branches:
      - master

env:
  OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
  OPENVPN_USERNAME: ${{ secrets.OPENVPN_USERNAME }}
  OPENVPN_PASSWORD: ${{ secrets.OPENVPN_PASSWORD }}
  CA_CERT: ${{ secrets.CA_CERT }}
  CLIENT_CERT: ${{ secrets.CLIENT_CERT }}
  TLS_CRYPT_KEY: ${{ secrets.TLS_CRYPT_KEY }}
  USER_KEY: ${{ secrets.USER_KEY }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GIT_REPO_PATH: ${{ secrets.GIT_REPO_PATH }}
  GIT_REPO_USERNAME: ${{ secrets.GIT_REPO_USERNAME }}
  GIT_REPO_NAME: ${{ secrets.GIT_REPO_NAME }}

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Create necessary OpenVPN key files
        run: |
          sudo mkdir -p /etc/openvpn
          echo "${{ secrets.CA_CERT }}" | sudo tee /etc/openvpn/ca.crt > /dev/null
          echo "${{ secrets.CLIENT_CERT }}" | sudo tee /etc/openvpn/client.crt > /dev/null
          echo "${{ secrets.TLS_CRYPT_KEY }}" | sudo tee /etc/openvpn/tls-crypt.key > /dev/null

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v3.1.0
        with:
          config_file: ${{ env.OPENVPN_CONFIG }}
          echo_config: false
          username: ${{ env.OPENVPN_USERNAME }}
          password: ${{ env.OPENVPN_PASSWORD }}
          client_key: ${{ env.USER_KEY }}

      - name: SSH commands for checkout/update git repo, build and deploy
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            set -e # Stop execution on any error

            echo "Setting up environment variables..."
            export ACCESS_TOKEN=${{ env.ACCESS_TOKEN }}
            export GIT_REPO_NAME=${{ env.GIT_REPO_NAME }}
            export GIT_REPO_PATH=${{ env.GIT_REPO_PATH }}
            export GIT_REPO_USERNAME=${{ env.GIT_REPO_USERNAME }}
            export SERVER_HOST=${{ env.SERVER_HOST }}
            export SSH_USERNAME=${{ env.SSH_USERNAME }}

            echo "Making scripts executable..."
            find .github/workflows -type f -name "*.sh" -exec chmod +x {} +

            echo "Cloning/Updating repository..."
            .github/workflows/clone_update_repo.sh

            echo "Executing deployment scripts..."
            .github/workflows/build_docker_images.sh
            .github/workflows/deploy_kubernetes_resources.sh

            echo "Restarting Kubernetes Deployments..."
            .github/workflows/reload_pods.sh

            echo "Deployment successful!"