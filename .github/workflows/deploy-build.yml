name: Deploy Flask API with MongoDB

on:
  push:
    branches:
      - master

env:
  OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
  OPENVPN_USERNAME: ${{ secrets.OPENVPN_USERNAME }}
  OPENVPN_PASSWORD: ${{ secrets.OPENVPN_PASSWORD }}
  USER_KEY: ${{ secrets.USER_KEY }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GIT_REPO_PATH: ${{ secrets.GIT_REPO_PATH }}
  GIT_REPO_USERNAME: ${{ secrets.GIT_REPO_USERNAME }}
  GIT_REPO_NAME: ${{ secrets.GIT_REPO_NAME }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.3

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2.0.2
        with:
          config_file: ${{ env.OPENVPN_CONFIG }}
          username: ${{ env.OPENVPN_USERNAME }}
          password: ${{ env.OPENVPN_PASSWORD }}
          client_key: ${{ env.USER_KEY }}

      - name: Checkout/Update repository
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ${{ env.GIT_REPO_PATH }}
            chown ${{ env.SSH_USERNAME }}:${{ env.SSH_USERNAME }} ${{ env.GIT_REPO_PATH }}
            if [ ! -d ${{ env.GIT_REPO_PATH }}/.git ]; then
              git clone https://${{ env.ACCESS_TOKEN }}@github.com/${{ env.GIT_REPO_USERNAME }}/${{ env.GIT_REPO_NAME }}.git ${{ env.GIT_REPO_PATH }}
            fi
            cd ${{ env.GIT_REPO_PATH }}
            git fetch origin
            git reset --hard origin/master

#      - name: Build and deploy
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ env.SERVER_HOST }}
#          username: ${{ env.SSH_USERNAME }}
#          key: ${{ env.SSH_PRIVATE_KEY }}
#          script: |
#            docker-compose -f docker/single/docker-compose.yml build
#            kubectl apply -f kubernetes/mongo-deployment.yml
#            kubectl apply -f kubernetes/single/resources/flask-deployment.yml
#            docker system prune -a --volumes --force