name: Deploy Flask API with MongoDB

on:
  push:
    branches:
      - master

env:
  OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
  OPENVPN_USERNAME: ${{ secrets.OPENVPN_USERNAME }}
  OPENVPN_PASSWORD: ${{ secrets.OPENVPN_PASSWORD }}
  USER_KEY: ${{ secrets.USER_KEY }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GIT_REPO_PATH: ${{ secrets.GIT_REPO_PATH }}
  GIT_REPO_USERNAME: ${{ secrets.GIT_REPO_USERNAME }}
  GIT_REPO_NAME: ${{ secrets.GIT_REPO_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.3

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2.0.2
        with:
          config_file: ${{ env.OPENVPN_CONFIG }}
          username: ${{ env.OPENVPN_USERNAME }}
          password: ${{ env.OPENVPN_PASSWORD }}
          client_key: ${{ env.USER_KEY }}

      - name: SSH commands for checkout/update git repo, build and deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ${{ env.GIT_REPO_PATH }}
            chown ${{ env.SSH_USERNAME }}:${{ env.SSH_USERNAME }} ${{ env.GIT_REPO_PATH }}
            if [ ! -d ${{ env.GIT_REPO_PATH  }}/.git ]; then
              git clone https://${{ env.ACCESS_TOKEN }}@github.com/${{ env.GIT_REPO_USERNAME }}/${{ env.GIT_REPO_NAME }}.git ${{ env.GIT_REPO_PATH }}
            fi
            cd ${{ env.GIT_REPO_PATH }}
            git fetch origin
            git reset --hard origin/master

            hash_directory() {
              directory="$1"
              exclude_directory="$2"
              hash=""
            
              while IFS= read -r -d '' file; do
                # Exclude the specified directory if provided
                if [[ -n "$exclude_directory" && "$file" == *"$exclude_directory"* ]]; then
                  continue
                fi
            
                # Calculate hash of each file
                file_hash=$(sha256sum "$file" | awk '{print $1}')
                hash="$hash$file_hash"
              done < <(find "$directory" -type f -print0 | LC_ALL=C sort -z)
            
              echo -n "$hash" | sha256sum | awk '{print $1}'
            }

            cd ..
            KUBERNETES_DIR="${{ env.GIT_REPO_PATH }}/kubernetes"
            KUBERNETES_DIR_SHA_FILE="kubernetes_dir_sha"
            current_sha=$(hash_directory "${KUBERNETES_DIR}")
            if [ -f "${KUBERNETES_DIR_SHA_FILE}" ]; then
              stored_sha=$(cat "${KUBERNETES_DIR_SHA_FILE}")
              if [ "${stored_sha}" = "${current_sha}" ]; then
                echo "SHA values match: The Kubernetes directory has not changed."
              else
                echo "SHA values differ: The Kubernetes directory has been modified."
                kubectl apply -f ${KUBERNETES_DIR}/resources.yml
              fi
            else
              current_sha=$(hash_directory "${KUBERNETES_DIR}")
              echo "File '${KUBERNETES_DIR_SHA_FILE}' created with the current SHA value."
              kubectl apply -f ${KUBERNETES_DIR}/resources.yml
            fi
            echo "${current_sha}" >"${KUBERNETES_DIR_SHA_FILE}"

            SOURCE_DIR="${GIT_REPO_PATH}"
            EXCLUDE_KUBERNETES_DIR="kubernetes"
            SOURCE_DIR_SHA_FILE="source_dir_sha"
            current_sha=$(hash_directory "${SOURCE_DIR}" "${EXCLUDE_KUBERNETES_DIR}")
            if [ -f "${SOURCE_DIR_SHA_FILE}" ]; then
              stored_sha=$(cat "${SOURCE_DIR_SHA_FILE}")
              if [ "${stored_sha}" = "${current_sha}" ]; then
                echo "SHA values match: The source directory has not changed."
              else
                echo "SHA values differ: The source directory has been modified."
                docker-compose -f ${SOURCE_DIR}/docker/single/docker-compose.yml build
              fi
            else
              current_sha=$(hash_directory "${SOURCE_DIR}" "${EXCLUDE_KUBERNETES_DIR}")
              echo "File '${SOURCE_DIR_SHA_FILE}' created with the current SHA value."
              docker-compose -f ${SOURCE_DIR}/docker/single/docker-compose.yml build
            fi
            echo "${current_sha}" >"${SOURCE_DIR_SHA_FILE}"

            kubectl get pods -n aqra | egrep 'mongo[a-z0-9\-]*' -iwo | tr -d '\n' | xargs kubectl delete pod -n aqra
            kubectl get pods -n aqra | egrep 'flask[a-z0-9\-]*' -iwo | tr -d '\n' | xargs kubectl delete pod -n aqra
            echo Sleeping for 30 seconds for the deployments to pull the new images
            sleep 30
            docker system prune -a --volumes --force