name: Deploy Flask API with MongoDB

on:
  push:
    branches:
      - master

env:
  OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
  OPENVPN_USERNAME: ${{ secrets.OPENVPN_USERNAME }}
  OPENVPN_PASSWORD: ${{ secrets.OPENVPN_PASSWORD }}
  USER_KEY: ${{ secrets.USER_KEY }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GIT_REPO_PATH: ${{ secrets.GIT_REPO_PATH }}
  GIT_REPO_USERNAME: ${{ secrets.GIT_REPO_USERNAME }}
  GIT_REPO_NAME: ${{ secrets.GIT_REPO_NAME }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file: ${{ env.OPENVPN_CONFIG }}
          username: ${{ env.OPENVPN_USERNAME }}
          password: ${{ env.OPENVPN_PASSWORD }}
          client_key: ${{ env.USER_KEY }}

      - name: Connect to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Create Git repo directory
        run: |
          sudo mkdir -p $GIT_REPO_PATH
          sudo chown $SSH_USERNAME:$SSH_USERNAME $GIT_REPO_PATH

      - name: Check if Git repo is initialized
        run: |
          if [ ! -d $GIT_REPO_PATH/.git ]; then
            git clone https://$ACCESS_TOKEN@github.com/$GIT_REPO_USERNAME/$GIT_REPO_NAME.git $GIT_REPO_PATH
          fi

      - name: Update Git repository
        run: |
          cd $GIT_REPO_PATH
          git fetch origin
          git reset --hard origin/main

      - name: Build Docker images and deploy with Docker Compose
        run: |
          cd $GIT_REPO_PATH
          docker-compose -f docker/single/docker-compose.yml build

      - name: Deploy Kubernetes manifests with kubectl
        run: |
          cd $GIT_REPO_PATH
          docker run --rm \
            -v $PWD:$PWD \
            -w $PWD \
            --env KUBECONFIG=KUBECONFIG \
            lachlanevenson/k8s-kubectl:v1.25.4 \
            kubectl apply -f .