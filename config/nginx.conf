# Define the user that will own and run the Nginx server
user nginx;
# Define the number of worker processes; recommended value is the number of cores that are being used by your server
worker_processes auto;

# Define the location on the file system of the error log, plus the minimum severity to log messages for
error_log logs/nginx/error.log warn;
# Define the file that will store the process ID of the main NGINX process
pid /var/run/nginx.pid;

# events block defines the parameters that affect connection processing.
events {
  # Define the maximum number of simultaneous connections that can be opened by a worker process
  worker_connections 1024;
}

# http block defines the parameters for how NGINX should handle HTTP web traffic
http {
  # Include the file defining the list of file types that are supported by NGINX
  include /etc/nginx/mime.types;
  # Define the default file type that is returned to the user
  default_type text/html;

  # Define the format of log messages.
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  # Define the location of the log of access attempts to NGINX
  access_log logs/nginx/access.log main;

  # Define the parameters to optimize the delivery of static content
  tcp_nopush on;
  tcp_nodelay on;

  # Define the timeout value for keep-alive connections with the client
  keepalive_timeout 65;

  # Include additional parameters for virtual host(s)/server(s)
  include whitelist.conf

  upstream flask {
		server unix:/tmp/nginx.socket fail_timeout=0;
 	}
  # Define the parameters for a specific virtual host/server
  server {
     # Define the server name, IP address, and/or port of the server
     listen <%= ENV["PORT"] %>;
     server_name _;

     # Define the specified charset to the “Content-Type” response header field
     charset utf-8;

     # Configure NGINX to reverse proxy HTTP requests to the upstream server (uWSGI (WSGI server))
     location /api {
         # Define the location of the proxy server to send the request to
         proxy_pass http://flask;

         include uwsgi_params;
         # Redefine the header fields that NGINX sends to the upstream server
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     }
  }
}