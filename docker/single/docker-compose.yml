version: '3.8'
services:
  flask:
    build:
      context: ../..
      dockerfile: docker/single/Dockerfile
    container_name: flask
    depends_on:
      - mongodb
    deploy:
      placement:
        constraints: [ node.role == worker ]
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      APP_ENV: ${APP_ENV}
      APP_NAME: ${APP_NAME}
      PYTHONPATH: ${PYTHONPATH}
      DARK_SKY_TOKEN: ${DARK_SKY_TOKEN}
      PULSE_ECO_USERNAME: ${PULSE_ECO_USERNAME}
      PULSE_ECO_PASSWORD: ${PULSE_ECO_PASSWORD}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      MONGODB_CONNECTION: ${MONGODB_CONNECTION}
      MONGODB_USERNAME: ${MONGODB_USERNAME}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_HOSTNAME: ${MONGODB_HOSTNAME}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
    env_file:
      - ../../.env
    image: air_quality_flask:latest
    networks:
      network:
        aliases:
          - aqra
    ports:
      - 5000:80
    volumes:
      - flaskdata:/var/api

  mongodb:
    build:
      context: ../..
      dockerfile: docker/mongo/Dockerfile
    container_name: mongodb
    deploy:
      placement:
        constraints: [ node.role == manager ]
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGODB_DATA_DIR: ${MONGODB_DATA_DIR}
      MONDODB_LOG_DIR: ${MONDODB_LOG_DIR}
    env_file:
      - ../../.env
    expose:
      - 27017
    image: air_quality_mongodb:latest
    networks:
      - network
    volumes:
      - mongodbdata:/data/db

networks:
  network:
    driver: overlay

volumes:
  flaskdata:
    driver: local
  mongodbdata:
    driver: local